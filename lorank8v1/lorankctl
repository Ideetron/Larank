#!/bin/bash

LOCDIR="/root/lorank8v1"
LOCCONF="$LOCDIR/local_conf.json"
LOCSTAT="$LOCDIR/stats.txt"
LOCFRWD="$LOCDIR/forwarder"
LOCRMTE="$LOCDIR/remote.env"

function startConcentrator
{ if [[ $1 == "fw_poly" ]] || [[ $1 == "fw_semtech" ]] || [[ $1 == "fw_loriot" ]]
  then
    echo -n $1 > $LOCFRWD
  fi
  systemctl start lorank.service
  echo "{}" > $LOCSTAT
  echo "Starting Concentrator ... "
}

function stopConcentrator
{ systemctl stop lorank.service
  echo "{}" > $LOCSTAT
  echo "Stopping Concentrator ... "
}

function modRemote
{ systemctl stop restart.service 
  systemctl disable restart.service > /dev/null 2>&1 
  systemctl stop ngrok.service
  systemctl disable ngrok.service > /dev/null 2>&1 
  if   [[ $1 == "true"  ]] &&  [[ $2 == "false" ]]; then echo "TNL=ssh" > $LOCRMTE;
  elif [[ $1 == "false" ]] &&  [[ $2 == "true"  ]]; then echo "TNL=web" > $LOCRMTE;
  elif [[ $1 == "true"  ]] &&  [[ $2 == "true"  ]]; then echo "TNL=ssh web" > $LOCRMTE;
  else                                                   echo "TNL=" > $LOCRMTE;
  fi
  echo "RBT=$3" >> $LOCRMTE;
  sleep 1
  if [[ $1 == "true"  ]] || [[ $2 == "true" ]]
  then
    systemctl enable ngrok.service > /dev/null 2>&1 
    systemctl start ngrok.service 
  fi  
  if [ $3 -gt 0 ]
  then 
    systemctl enable restart.service > /dev/null 2>&1 
    systemctl start restart.service 
  fi
  echo "Processing remote ... "
}

if   [[  $1 == "DoShutdown"    ]]; then shutdown -h now && echo "Shutting down ...";
elif [[  $1 == "DoReboot"      ]]; then reboot && echo "Rebooting ... ";
elif [[  $1 == "DoStartConc"   ]]; then startConcentrator $2;
elif [[  $1 == "DoStopConc"    ]]; then stopConcentrator;
elif [[  $1 == "DoClearStats"  ]]; then echo "DoClearStats";
elif [[  $1 == "DoCheckUpdate" ]]; then echo "DoCheckUpdate";
elif [[  $1 == "DoUpdate"      ]]; then echo "DoUpdate";
elif [[  $1 == "GetEth0Addr"   ]]; then cat /sys/class/net/eth0/address;
elif [[  $1 == "GetStatus"     ]]; then systemctl status lorank.service | grep "Active:";
elif [[  $1 == "GetSysDate"    ]]; then date;
elif [[  $1 == "GetVersion"    ]]; then cd /root/Lorank; git status | head -n 1;
elif [[  $1 == "GetUname"      ]]; then uname -a;
elif [[  $1 == "GetDogtag"     ]]; then cat /etc/dogtag;
elif [[  $1 == "GetStats"      ]]; then cat $LOCSTAT;
elif [[  $1 == "GetForwarder"  ]]; then cat $LOCFRWD;
elif [[  $1 == "GetSysInfo"    ]]; then echo $(cat /proc/uptime)";"$(cat /proc/loadavg)";"$(date);
elif [[  $1 == "GetLogs50"     ]]; then tail -n 50 /var/log/syslog;
elif [[  $1 == "GetLogs200"    ]]; then tail -n 200 /var/log/syslog;
elif [[  $1 == "GetLogsOn"     ]]; then tail -f /var/log/syslog;
elif [[  $1 == "GetLogsOff"    ]]; then killall tail;
elif [[  $1 == "GetDiskfree"   ]]; then df -BM | grep -e "%[[:space:]]/$" | head -n 1 |  tr -s ' ';
elif [[  $1 == "GetConf"       ]]; then cat $LOCCONF | sed -r ':a; s%(.*)/\*.*\*/%\1%; ta; /\/\*/ !b; N; ba';
elif [[  $1 == "SetConf"       ]]; then echo -n $2 > $LOCCONF && echo "Updating local_conf.json ...";
elif [[  $1 == "SetRemote"     ]]; then modRemote $2;
else logger -s "ERROR: lorankctl received unknown command: $1"
fi

